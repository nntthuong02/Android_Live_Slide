<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/droid2developers/liveslider/provider/SepWallpaperProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/droid2developers/liveslider/provider/SepWallpaperProvider.java" />
              <option name="updatedContent" value="package com.droid2developers.liveslider.provider;&#10;&#10;import android.content.ContentProvider;&#10;import android.content.ContentValues;&#10;import android.content.UriMatcher;&#10;import android.database.Cursor;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.os.ParcelFileDescriptor;&#10;import android.util.Log;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import java.io.FileNotFoundException;&#10;&#10;/**&#10; * Samsung SEP (Samsung Experience Platform) Wallpaper Provider&#10; * This provider is required for Samsung devices to support live wallpaper screenshots&#10; * and preview functionality in the system wallpaper picker.&#10; */&#10;public class SepWallpaperProvider extends ContentProvider {&#10;    private static final String TAG = &quot;SepWallpaperProvider&quot;;&#10;    private static final String AUTHORITY = &quot;com.droid2developers.liveslider.provider.sepwallpaper&quot;;&#10;    &#10;    private static final int SCREENSHOT = 1;&#10;    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);&#10;    &#10;    static {&#10;        sUriMatcher.addURI(AUTHORITY, &quot;screenshot&quot;, SCREENSHOT);&#10;    }&#10;    &#10;    @Override&#10;    public boolean onCreate() {&#10;        Log.d(TAG, &quot;SepWallpaperProvider created&quot;);&#10;        return true;&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection,&#10;                       @Nullable String[] selectionArgs, @Nullable String sortOrder) {&#10;        Log.d(TAG, &quot;query() called with uri: &quot; + uri);&#10;        return null;&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public String getType(@NonNull Uri uri) {&#10;        switch (sUriMatcher.match(uri)) {&#10;            case SCREENSHOT:&#10;                return &quot;image/png&quot;;&#10;            default:&#10;                return null;&#10;        }&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {&#10;        Log.d(TAG, &quot;insert() called with uri: &quot; + uri);&#10;        return null;&#10;    }&#10;    &#10;    @Override&#10;    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {&#10;        Log.d(TAG, &quot;delete() called with uri: &quot; + uri);&#10;        return 0;&#10;    }&#10;    &#10;    @Override&#10;    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection,&#10;                     @Nullable String[] selectionArgs) {&#10;        Log.d(TAG, &quot;update() called with uri: &quot; + uri);&#10;        return 0;&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {&#10;        Log.d(TAG, &quot;openFile() called with uri: &quot; + uri + &quot;, mode: &quot; + mode);&#10;        &#10;        switch (sUriMatcher.match(uri)) {&#10;            case SCREENSHOT:&#10;                // Samsung system is requesting a screenshot of the live wallpaper&#10;                // For now, return null to indicate no screenshot available&#10;                // You could implement actual screenshot functionality here if needed&#10;                Log.i(TAG, &quot;Screenshot requested for live wallpaper&quot;);&#10;                return null;&#10;            default:&#10;                throw new FileNotFoundException(&quot;Unknown URI: &quot; + uri);&#10;        }&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras) {&#10;        Log.d(TAG, &quot;call() method: &quot; + method + &quot;, arg: &quot; + arg);&#10;        &#10;        // Handle Samsung-specific method calls here if needed&#10;        Bundle result = new Bundle();&#10;        &#10;        switch (method) {&#10;            case &quot;getScreenshot&quot;:&#10;                // Samsung is requesting wallpaper screenshot&#10;                Log.i(TAG, &quot;getScreenshot method called&quot;);&#10;                result.putBoolean(&quot;success&quot;, false); // Indicate no screenshot available&#10;                break;&#10;            default:&#10;                Log.w(TAG, &quot;Unknown method: &quot; + method);&#10;                break;&#10;        }&#10;        &#10;        return result;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/droid2developers/liveslider/views/activities/SettingsActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/droid2developers/liveslider/views/activities/SettingsActivity.java" />
              <option name="originalContent" value="package com.droid2developers.liveslider.views.activities;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.SharedPreferences;&#10;import android.graphics.Color;&#10;import android.os.Bundle;&#10;import android.text.Html;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.CompoundButton;&#10;import android.widget.SeekBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.core.content.res.ResourcesCompat;&#10;import androidx.preference.PreferenceManager;&#10;import com.droid2developers.liveslider.R;&#10;import com.droid2developers.liveslider.live_wallpaper.Cube;&#10;import com.droid2developers.liveslider.models.BiasChangeEvent;&#10;import com.droid2developers.liveslider.models.FaceRotationEvent;&#10;import com.droid2developers.liveslider.utils.Constant;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import com.google.android.material.materialswitch.MaterialSwitch;&#10;import org.greenrobot.eventbus.EventBus;&#10;import org.greenrobot.eventbus.Subscribe;&#10;import org.greenrobot.eventbus.ThreadMode;&#10;import xyz.aprildown.hmspickerview.HmsPickerView;&#10;import static com.droid2developers.liveslider.utils.Constant.DEFAULT_SLIDESHOW_TIME;&#10;import static com.droid2developers.liveslider.utils.Constant.MINIMUM_SLIDESHOW_TIME;&#10;import static com.droid2developers.liveslider.utils.Constant.TYPE_SINGLE;&#10;import static com.droid2developers.liveslider.utils.Constant.TYPE_SLIDESHOW;&#10;&#10;public class SettingsActivity extends AppCompatActivity implements View.OnClickListener, CompoundButton.OnCheckedChangeListener {&#10;&#10;    private SharedPreferences.Editor editor;&#10;    private SharedPreferences prefs;&#10;    private int wallpaperType = TYPE_SINGLE;&#10;&#10;    private CardView scrollCard, slideshowCard, intervalCard, doubleTapCard, powerSaverCard, backButton;&#10;    private MaterialSwitch scrollSwitch, slideshowSwitch, doubleTapSwitch, powerSaverSwitch;&#10;    private TextView intervalText, faceText;&#10;    private SeekBar seekBarRange, seekBarDelay;&#10;    private Cube cube;&#10;&#10;    @SuppressLint(&quot;CommitPrefEdits&quot;)&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_settings);&#10;        getWindow().getDecorView().getRootView().setBackgroundColor(Color.argb(153, 35, 35, 35));&#10;&#10;        prefs = PreferenceManager.getDefaultSharedPreferences(this);&#10;        editor = prefs.edit();&#10;&#10;        bindViews();&#10;        setupInitialState();&#10;        setupListeners();&#10;    }&#10;&#10;    private void bindViews() {&#10;        cube = findViewById(R.id.cube);&#10;        seekBarRange = findViewById(R.id.seekBarRange);&#10;        seekBarDelay = findViewById(R.id.seekBarDelay);&#10;        backButton = findViewById(R.id.backButtonId);&#10;&#10;        scrollCard = findViewById(R.id.card1ID);&#10;        slideshowCard = findViewById(R.id.card2ID);&#10;        intervalCard = findViewById(R.id.card3ID);&#10;        doubleTapCard = findViewById(R.id.card4ID);&#10;        powerSaverCard = findViewById(R.id.card5ID);&#10;&#10;        scrollSwitch = findViewById(R.id.switch1ID);&#10;        slideshowSwitch = findViewById(R.id.switch2ID);&#10;        doubleTapSwitch = findViewById(R.id.switch3ID);&#10;        powerSaverSwitch = findViewById(R.id.switch4ID);&#10;&#10;        intervalText = findViewById(R.id.interval_intro);&#10;        faceText = findViewById(R.id.face);&#10;&#10;        TextView introduction = findViewById(R.id.introduction);&#10;        CharSequence intro = Html.fromHtml(getResources().getString(R.string.introduction2),&#10;                Html.FROM_HTML_MODE_LEGACY&#10;        );&#10;        introduction.setText(intro);&#10;    }&#10;&#10;    private void setupInitialState() {&#10;        seekBarRange.setProgress(prefs.getInt(&quot;range&quot;, 10));&#10;        seekBarDelay.setProgress(prefs.getInt(&quot;delay&quot;, 10));&#10;        scrollSwitch.setChecked(prefs.getBoolean(&quot;scroll&quot;, true));&#10;        slideshowSwitch.setChecked(prefs.getBoolean(&quot;slideshow&quot;, false));&#10;        doubleTapSwitch.setChecked(prefs.getBoolean(&quot;double_tap&quot;, false));&#10;        powerSaverSwitch.setChecked(prefs.getBoolean(&quot;power_saver&quot;, true));&#10;&#10;        wallpaperType = prefs.getInt(&quot;type&quot;, TYPE_SINGLE);&#10;        long timeInMillis = prefs.getLong(&quot;slideshow_timer&quot;, DEFAULT_SLIDESHOW_TIME);&#10;        intervalText.setText(Constant.getTimeText(timeInMillis));&#10;&#10;        updateSlideshowCardsVisibility();&#10;    }&#10;&#10;    private void setupListeners() {&#10;        backButton.setOnClickListener(this);&#10;        scrollCard.setOnClickListener(this);&#10;        slideshowCard.setOnClickListener(this);&#10;        intervalCard.setOnClickListener(this);&#10;        doubleTapCard.setOnClickListener(this);&#10;        powerSaverCard.setOnClickListener(this);&#10;&#10;        scrollSwitch.setOnCheckedChangeListener(this);&#10;        slideshowSwitch.setOnCheckedChangeListener(this);&#10;        doubleTapSwitch.setOnCheckedChangeListener(this);&#10;        powerSaverSwitch.setOnCheckedChangeListener(this);&#10;&#10;        setupSeekBarListener(seekBarRange, &quot;range&quot;);&#10;        setupSeekBarListener(seekBarDelay, &quot;delay&quot;);&#10;    }&#10;    &#10;    private void setupSeekBarListener(SeekBar seekBar, final String key) {&#10;        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {&#10;            @Override&#10;            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {&#10;                if (fromUser) {&#10;                    editor.putInt(key, progress).apply();&#10;                }&#10;            }&#10;            @Override public void onStartTrackingTouch(SeekBar seekBar) {}&#10;            @Override public void onStopTrackingTouch(SeekBar seekBar) {}&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onClick(View v) {&#10;        final int id = v.getId();&#10;        if (id == R.id.backButtonId) {&#10;            getOnBackPressedDispatcher().onBackPressed();&#10;        } else if (id == R.id.card1ID) {&#10;            scrollSwitch.toggle();&#10;        } else if (id == R.id.card2ID) {&#10;            handleSlideshowClick();&#10;        } else if (id == R.id.card3ID) {&#10;            showIntervalDialog();&#10;        } else if (id == R.id.card4ID) {&#10;            doubleTapSwitch.toggle();&#10;        } else if (id == R.id.card5ID) {&#10;            powerSaverSwitch.toggle();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {&#10;        final int id = buttonView.getId();&#10;        if (id == R.id.switch1ID) {&#10;            editor.putBoolean(&quot;scroll&quot;, isChecked);&#10;        } else if (id == R.id.switch2ID) {&#10;            editor.putBoolean(&quot;slideshow&quot;, isChecked);&#10;            updateSlideshowCardsVisibility();&#10;        } else if (id == R.id.switch3ID) {&#10;            editor.putBoolean(&quot;double_tap&quot;, isChecked);&#10;        } else if (id == R.id.switch4ID) {&#10;            editor.putBoolean(&quot;power_saver&quot;, isChecked);&#10;        }&#10;        editor.apply();&#10;    }&#10;&#10;    private void handleSlideshowClick() {&#10;        if (wallpaperType == TYPE_SLIDESHOW) {&#10;            slideshowSwitch.toggle();&#10;        } else {&#10;            Toast.makeText(this, R.string.select_playlist, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void updateSlideshowCardsVisibility() {&#10;        int visibility = slideshowSwitch.isChecked() ? View.VISIBLE : View.GONE;&#10;        intervalCard.setVisibility(visibility);&#10;        doubleTapCard.setVisibility(visibility);&#10;    }&#10;&#10;    private void showIntervalDialog() {&#10;        View dialogView = getLayoutInflater().inflate(R.layout.hms_picker, null);&#10;        HmsPickerView hmsPickerView = dialogView.findViewById(R.id.hmsPickerView);&#10;        TextView errorTextView = dialogView.findViewById(R.id.errorTextView);&#10;        hmsPickerView.setTimeInMillis(prefs.getLong(&quot;slideshow_timer&quot;, DEFAULT_SLIDESHOW_TIME));&#10;&#10;        AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)&#10;                .setIcon(ResourcesCompat.getDrawable(getResources(), R.drawable.clock_icon, null))&#10;                .setTitle(&quot;Change slideshow time interval?&quot;)&#10;                .setView(dialogView)&#10;                .setBackgroundInsetBottom(0)&#10;                .setBackgroundInsetTop(0)&#10;                .setPositiveButton(android.R.string.ok, null)&#10;                .setNegativeButton(android.R.string.cancel, (dialog, which) -&gt; dialog.dismiss())&#10;                .create();&#10;&#10;        alertDialog.setOnShowListener(dialog -&gt; {&#10;            Button positive = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);&#10;            positive.setOnClickListener(v -&gt; {&#10;                long timeInMillis = hmsPickerView.getTimeInMillis();&#10;                if (timeInMillis &gt; MINIMUM_SLIDESHOW_TIME) {&#10;                    intervalText.setText(Constant.getTimeText(timeInMillis));&#10;                    editor.putLong(&quot;slideshow_timer&quot;, timeInMillis).apply();&#10;                    errorTextView.setVisibility(View.GONE);&#10;                    alertDialog.dismiss();&#10;                } else {&#10;                    errorTextView.setVisibility(View.VISIBLE);&#10;                }&#10;            });&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    @Subscribe(threadMode = ThreadMode.MAIN)&#10;    public void onMessageEvent(BiasChangeEvent event) {&#10;        cube.setRotation(event.getY(), event.getX());&#10;    }&#10;&#10;    @Subscribe(threadMode = ThreadMode.MAIN)&#10;    public void onFaceRotationEvent(FaceRotationEvent event) {&#10;        faceText.setText(event.getReadableFaceName());&#10;    }&#10;&#10;    @Override&#10;    public void onStart() {&#10;        super.onStart();&#10;        EventBus.getDefault().register(this);&#10;    }&#10;&#10;    @Override&#10;    public void onStop() {&#10;        super.onStop();&#10;        EventBus.getDefault().unregister(this);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.droid2developers.liveslider.views.activities;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.SharedPreferences;&#10;import android.graphics.Color;&#10;import android.os.Bundle;&#10;import android.text.Html;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.SeekBar;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.core.content.res.ResourcesCompat;&#10;import androidx.preference.PreferenceManager;&#10;import com.droid2developers.liveslider.R;&#10;import com.droid2developers.liveslider.live_wallpaper.Cube;&#10;import com.droid2developers.liveslider.models.BiasChangeEvent;&#10;import com.droid2developers.liveslider.models.FaceRotationEvent;&#10;import com.droid2developers.liveslider.utils.Constant;&#10;import com.droid2developers.liveslider.views.components.SettingsCardView;&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder;&#10;import org.greenrobot.eventbus.EventBus;&#10;import org.greenrobot.eventbus.Subscribe;&#10;import org.greenrobot.eventbus.ThreadMode;&#10;import xyz.aprildown.hmspickerview.HmsPickerView;&#10;import static com.droid2developers.liveslider.utils.Constant.DEFAULT_SLIDESHOW_TIME;&#10;import static com.droid2developers.liveslider.utils.Constant.MINIMUM_SLIDESHOW_TIME;&#10;import static com.droid2developers.liveslider.utils.Constant.TYPE_SINGLE;&#10;import static com.droid2developers.liveslider.utils.Constant.TYPE_SLIDESHOW;&#10;&#10;public class SettingsActivity extends AppCompatActivity implements SettingsCardView.OnCardClickListener, SettingsCardView.OnSwitchChangeListener {&#10;&#10;    private SharedPreferences.Editor editor;&#10;    private SharedPreferences prefs;&#10;    private int wallpaperType = TYPE_SINGLE;&#10;&#10;    private SettingsCardView scrollCard, slideshowCard, intervalCard, doubleTapCard, powerSaverCard;&#10;    private CardView backButton;&#10;    private TextView faceText;&#10;    private SeekBar seekBarRange, seekBarDelay;&#10;    private Cube cube;&#10;&#10;    @SuppressLint(&quot;CommitPrefEdits&quot;)&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_settings);&#10;        getWindow().getDecorView().getRootView().setBackgroundColor(Color.argb(153, 35, 35, 35));&#10;&#10;        prefs = PreferenceManager.getDefaultSharedPreferences(this);&#10;        editor = prefs.edit();&#10;&#10;        bindViews();&#10;        setupInitialState();&#10;        setupListeners();&#10;    }&#10;&#10;    private void bindViews() {&#10;        cube = findViewById(R.id.cube);&#10;        seekBarRange = findViewById(R.id.seekBarRange);&#10;        seekBarDelay = findViewById(R.id.seekBarDelay);&#10;        backButton = findViewById(R.id.backButtonId);&#10;&#10;        scrollCard = findViewById(R.id.card1ID);&#10;        powerSaverCard = findViewById(R.id.card5ID);&#10;        slideshowCard = findViewById(R.id.card2ID);&#10;        intervalCard = findViewById(R.id.card3ID);&#10;        doubleTapCard = findViewById(R.id.card4ID);&#10;&#10;        faceText = findViewById(R.id.face);&#10;&#10;        TextView introduction = findViewById(R.id.introduction);&#10;        CharSequence intro = Html.fromHtml(getResources().getString(R.string.introduction2),&#10;                Html.FROM_HTML_MODE_LEGACY&#10;        );&#10;        introduction.setText(intro);&#10;    }&#10;&#10;    private void setupInitialState() {&#10;        seekBarRange.setProgress(prefs.getInt(&quot;range&quot;, 10));&#10;        seekBarDelay.setProgress(prefs.getInt(&quot;delay&quot;, 10));&#10;&#10;        scrollCard.setSwitchChecked(prefs.getBoolean(&quot;scroll&quot;, true));&#10;        slideshowCard.setSwitchChecked(prefs.getBoolean(&quot;slideshow&quot;, false));&#10;        doubleTapCard.setSwitchChecked(prefs.getBoolean(&quot;double_tap&quot;, false));&#10;        powerSaverCard.setSwitchChecked(prefs.getBoolean(&quot;power_saver&quot;, true));&#10;&#10;        wallpaperType = prefs.getInt(&quot;type&quot;, TYPE_SINGLE);&#10;        long timeInMillis = prefs.getLong(&quot;slideshow_timer&quot;, DEFAULT_SLIDESHOW_TIME);&#10;        updateIntervalText(timeInMillis);&#10;&#10;        updateSlideshowCardsVisibility();&#10;    }&#10;&#10;    private void setupListeners() {&#10;        backButton.setOnClickListener(v -&gt; getOnBackPressedDispatcher().onBackPressed());&#10;&#10;        // Set listeners for custom card views&#10;        scrollCard.setOnCardClickListener(this);&#10;        scrollCard.setOnSwitchChangeListener(this);&#10;&#10;        powerSaverCard.setOnCardClickListener(this);&#10;        powerSaverCard.setOnSwitchChangeListener(this);&#10;&#10;        slideshowCard.setOnCardClickListener(this);&#10;        slideshowCard.setOnSwitchChangeListener(this);&#10;&#10;        intervalCard.setOnCardClickListener(this);&#10;&#10;        doubleTapCard.setOnCardClickListener(this);&#10;        doubleTapCard.setOnSwitchChangeListener(this);&#10;&#10;        setupSeekBarListener(seekBarRange, &quot;range&quot;);&#10;        setupSeekBarListener(seekBarDelay, &quot;delay&quot;);&#10;    }&#10;    &#10;    private void setupSeekBarListener(SeekBar seekBar, final String key) {&#10;        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {&#10;            @Override&#10;            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {&#10;                if (fromUser) {&#10;                    editor.putInt(key, progress).apply();&#10;                }&#10;            }&#10;            @Override public void onStartTrackingTouch(SeekBar seekBar) {}&#10;            @Override public void onStopTrackingTouch(SeekBar seekBar) {}&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onCardClick(SettingsCardView cardView) {&#10;        final int id = cardView.getId();&#10;        if (id == R.id.card2ID) {&#10;            // Special handling for slideshow card - don't auto-toggle switch&#10;            handleSlideshowClick();&#10;        } else if (id == R.id.card3ID) {&#10;            showIntervalDialog();&#10;        }&#10;        // Other cards will handle switch toggle automatically in the custom component&#10;    }&#10;&#10;    @Override&#10;    public void onSwitchChanged(SettingsCardView cardView, boolean isChecked) {&#10;        final int id = cardView.getId();&#10;        if (id == R.id.card1ID) {&#10;            editor.putBoolean(&quot;scroll&quot;, isChecked);&#10;        } else if (id == R.id.card5ID) {&#10;            editor.putBoolean(&quot;power_saver&quot;, isChecked);&#10;        } else if (id == R.id.card2ID) {&#10;            // Only update preferences if slideshow is available&#10;            if (wallpaperType == TYPE_SLIDESHOW || !isChecked) {&#10;                editor.putBoolean(&quot;slideshow&quot;, isChecked);&#10;                updateSlideshowCardsVisibility();&#10;            } else {&#10;                // Revert switch state if slideshow not available&#10;                slideshowCard.setSwitchChecked(false);&#10;                Toast.makeText(this, R.string.select_playlist, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else if (id == R.id.card4ID) {&#10;            editor.putBoolean(&quot;double_tap&quot;, isChecked);&#10;        }&#10;        editor.apply();&#10;    }&#10;&#10;    private void handleSlideshowClick() {&#10;        if (wallpaperType != TYPE_SLIDESHOW) {&#10;            // This will be handled in onSwitchChanged when switch gets toggled&#10;            // Just show toast here, don't modify switch state&#10;        }&#10;        // If slideshow is available, let the switch toggle normally&#10;    }&#10;&#10;    private void updateSlideshowCardsVisibility() {&#10;        int visibility = slideshowCard.isSwitchChecked() ? View.VISIBLE : View.GONE;&#10;        intervalCard.setVisibility(visibility);&#10;        doubleTapCard.setVisibility(visibility);&#10;    }&#10;&#10;    private void updateIntervalText(long timeInMillis) {&#10;        String timeText = Constant.getTimeText(timeInMillis);&#10;        intervalCard.setSubHeaderText(timeText);&#10;    }&#10;&#10;    private void showIntervalDialog() {&#10;        View dialogView = getLayoutInflater().inflate(R.layout.hms_picker, null);&#10;        HmsPickerView hmsPickerView = dialogView.findViewById(R.id.hmsPickerView);&#10;        TextView errorTextView = dialogView.findViewById(R.id.errorTextView);&#10;        hmsPickerView.setTimeInMillis(prefs.getLong(&quot;slideshow_timer&quot;, DEFAULT_SLIDESHOW_TIME));&#10;&#10;        AlertDialog alertDialog = new MaterialAlertDialogBuilder(this)&#10;                .setIcon(ResourcesCompat.getDrawable(getResources(), R.drawable.clock_icon, null))&#10;                .setTitle(&quot;Change slideshow time interval?&quot;)&#10;                .setView(dialogView)&#10;                .setBackgroundInsetBottom(0)&#10;                .setBackgroundInsetTop(0)&#10;                .setPositiveButton(android.R.string.ok, null)&#10;                .setNegativeButton(android.R.string.cancel, (dialog, which) -&gt; dialog.dismiss())&#10;                .create();&#10;&#10;        alertDialog.setOnShowListener(dialog -&gt; {&#10;            Button positive = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);&#10;            positive.setOnClickListener(v -&gt; {&#10;                long timeInMillis = hmsPickerView.getTimeInMillis();&#10;                if (timeInMillis &gt; MINIMUM_SLIDESHOW_TIME) {&#10;                    updateIntervalText(timeInMillis);&#10;                    editor.putLong(&quot;slideshow_timer&quot;, timeInMillis).apply();&#10;                    errorTextView.setVisibility(View.GONE);&#10;                    alertDialog.dismiss();&#10;                } else {&#10;                    errorTextView.setVisibility(View.VISIBLE);&#10;                }&#10;            });&#10;        });&#10;        alertDialog.show();&#10;    }&#10;&#10;    @Subscribe(threadMode = ThreadMode.MAIN)&#10;    public void onMessageEvent(BiasChangeEvent event) {&#10;        cube.setRotation(event.getY(), event.getX());&#10;    }&#10;&#10;    @Subscribe(threadMode = ThreadMode.MAIN)&#10;    public void onFaceRotationEvent(FaceRotationEvent event) {&#10;        faceText.setText(event.getReadableFaceName());&#10;    }&#10;&#10;    @Override&#10;    public void onStart() {&#10;        super.onStart();&#10;        EventBus.getDefault().register(this);&#10;    }&#10;&#10;    @Override&#10;    public void onStop() {&#10;        super.onStop();&#10;        EventBus.getDefault().unregister(this);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/attrs.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/attrs.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;declare-styleable name=&quot;SettingsCardView&quot;&gt;&#10;        &lt;attr name=&quot;cardIcon&quot; format=&quot;reference&quot; /&gt;&#10;        &lt;attr name=&quot;cardHeader&quot; format=&quot;string&quot; /&gt;&#10;        &lt;attr name=&quot;cardSubHeader&quot; format=&quot;string&quot; /&gt;&#10;        &lt;attr name=&quot;hasSwitch&quot; format=&quot;boolean&quot; /&gt;&#10;        &lt;attr name=&quot;switchChecked&quot; format=&quot;boolean&quot; /&gt;&#10;    &lt;/declare-styleable&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>