<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/droid2developers/liveslider/provider/SepWallpaperProvider.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/droid2developers/liveslider/provider/SepWallpaperProvider.java" />
              <option name="updatedContent" value="package com.droid2developers.liveslider.provider;&#10;&#10;import android.content.ContentProvider;&#10;import android.content.ContentValues;&#10;import android.content.UriMatcher;&#10;import android.database.Cursor;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.os.ParcelFileDescriptor;&#10;import android.util.Log;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import java.io.FileNotFoundException;&#10;&#10;/**&#10; * Samsung SEP (Samsung Experience Platform) Wallpaper Provider&#10; * This provider is required for Samsung devices to support live wallpaper screenshots&#10; * and preview functionality in the system wallpaper picker.&#10; */&#10;public class SepWallpaperProvider extends ContentProvider {&#10;    private static final String TAG = &quot;SepWallpaperProvider&quot;;&#10;    private static final String AUTHORITY = &quot;com.droid2developers.liveslider.provider.sepwallpaper&quot;;&#10;    &#10;    private static final int SCREENSHOT = 1;&#10;    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);&#10;    &#10;    static {&#10;        sUriMatcher.addURI(AUTHORITY, &quot;screenshot&quot;, SCREENSHOT);&#10;    }&#10;    &#10;    @Override&#10;    public boolean onCreate() {&#10;        Log.d(TAG, &quot;SepWallpaperProvider created&quot;);&#10;        return true;&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection,&#10;                       @Nullable String[] selectionArgs, @Nullable String sortOrder) {&#10;        Log.d(TAG, &quot;query() called with uri: &quot; + uri);&#10;        return null;&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public String getType(@NonNull Uri uri) {&#10;        switch (sUriMatcher.match(uri)) {&#10;            case SCREENSHOT:&#10;                return &quot;image/png&quot;;&#10;            default:&#10;                return null;&#10;        }&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {&#10;        Log.d(TAG, &quot;insert() called with uri: &quot; + uri);&#10;        return null;&#10;    }&#10;    &#10;    @Override&#10;    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {&#10;        Log.d(TAG, &quot;delete() called with uri: &quot; + uri);&#10;        return 0;&#10;    }&#10;    &#10;    @Override&#10;    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection,&#10;                     @Nullable String[] selectionArgs) {&#10;        Log.d(TAG, &quot;update() called with uri: &quot; + uri);&#10;        return 0;&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {&#10;        Log.d(TAG, &quot;openFile() called with uri: &quot; + uri + &quot;, mode: &quot; + mode);&#10;        &#10;        switch (sUriMatcher.match(uri)) {&#10;            case SCREENSHOT:&#10;                // Samsung system is requesting a screenshot of the live wallpaper&#10;                // For now, return null to indicate no screenshot available&#10;                // You could implement actual screenshot functionality here if needed&#10;                Log.i(TAG, &quot;Screenshot requested for live wallpaper&quot;);&#10;                return null;&#10;            default:&#10;                throw new FileNotFoundException(&quot;Unknown URI: &quot; + uri);&#10;        }&#10;    }&#10;    &#10;    @Nullable&#10;    @Override&#10;    public Bundle call(@NonNull String method, @Nullable String arg, @Nullable Bundle extras) {&#10;        Log.d(TAG, &quot;call() method: &quot; + method + &quot;, arg: &quot; + arg);&#10;        &#10;        // Handle Samsung-specific method calls here if needed&#10;        Bundle result = new Bundle();&#10;        &#10;        switch (method) {&#10;            case &quot;getScreenshot&quot;:&#10;                // Samsung is requesting wallpaper screenshot&#10;                Log.i(TAG, &quot;getScreenshot method called&quot;);&#10;                result.putBoolean(&quot;success&quot;, false); // Indicate no screenshot available&#10;                break;&#10;            default:&#10;                Log.w(TAG, &quot;Unknown method: &quot; + method);&#10;                break;&#10;        }&#10;        &#10;        return result;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>